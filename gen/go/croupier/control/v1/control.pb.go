// Code generated by hand for development without protoc. DO NOT USE IN PROD.
package controlv1

import (
    "context"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
)

// Messages (minimal JSON-friendly structs)
type FunctionDescriptor struct {
    Id       string `json:"id,omitempty"`
    Version  string `json:"version,omitempty"`
    Category string `json:"category,omitempty"`
    Risk     string `json:"risk,omitempty"`
}
func (x *FunctionDescriptor) GetId() string { if x==nil {return ""}; return x.Id }

type RegisterRequest struct {
    AgentId   string `json:"agent_id,omitempty"`
    Version   string `json:"version,omitempty"`
    Functions []*FunctionDescriptor `json:"functions,omitempty"`
    RpcAddr   string `json:"rpc_addr,omitempty"`
    GameId    string `json:"game_id,omitempty"`
    Env       string `json:"env,omitempty"`
}
func (x *RegisterRequest) GetAgentId() string { if x==nil {return ""}; return x.AgentId }
func (x *RegisterRequest) GetVersion() string { if x==nil {return ""}; return x.Version }
func (x *RegisterRequest) GetFunctions() []*FunctionDescriptor { if x==nil {return nil}; return x.Functions }
func (x *RegisterRequest) GetRpcAddr() string { if x==nil {return ""}; return x.RpcAddr }
func (x *RegisterRequest) GetGameId() string { if x==nil {return ""}; return x.GameId }
func (x *RegisterRequest) GetEnv() string { if x==nil {return ""}; return x.Env }

type RegisterResponse struct {
    SessionId string `json:"session_id,omitempty"`
    ExpireAt  int64  `json:"expire_at,omitempty"`
}
func (x *RegisterResponse) GetSessionId() string { if x==nil {return ""}; return x.SessionId }
func (x *RegisterResponse) GetExpireAt() int64 { if x==nil {return 0}; return x.ExpireAt }

type HeartbeatRequest struct {
    AgentId   string `json:"agent_id,omitempty"`
    SessionId string `json:"session_id,omitempty"`
}
type HeartbeatResponse struct{}

// Service definitions
type ControlServiceServer interface {
    Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error)
    Heartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error)
}

type UnimplementedControlServiceServer struct{}

func (*UnimplementedControlServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedControlServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterControlServiceServer(s *grpc.Server, srv ControlServiceServer) {
    s.RegisterService(&grpc.ServiceDesc{
        ServiceName: "croupier.control.v1.ControlService",
        HandlerType: (*ControlServiceServer)(nil),
        Methods: []grpc.MethodDesc{
            {MethodName: "Register", Handler: _ControlService_Register_Handler},
            {MethodName: "Heartbeat", Handler: _ControlService_Heartbeat_Handler},
        },
        Streams:  []grpc.StreamDesc{},
        Metadata: "control.proto",
    }, srv)
}

func _ControlService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(RegisterRequest)
    if err := dec(in); err != nil { return nil, err }
    if interceptor == nil { return srv.(ControlServiceServer).Register(ctx, in) }
    info := &grpc.UnaryServerInfo{Server: srv, FullMethod: "/croupier.control.v1.ControlService/Register"}
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(ControlServiceServer).Register(ctx, req.(*RegisterRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _ControlService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(HeartbeatRequest)
    if err := dec(in); err != nil { return nil, err }
    if interceptor == nil { return srv.(ControlServiceServer).Heartbeat(ctx, in) }
    info := &grpc.UnaryServerInfo{Server: srv, FullMethod: "/croupier.control.v1.ControlService/Heartbeat"}
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(ControlServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
    }
    return interceptor(ctx, in, info, handler)
}

// Client
type ControlServiceClient interface {
    Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
    Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type controlServiceClient struct { cc grpc.ClientConnInterface }

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient { return &controlServiceClient{cc} }

func (c *controlServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
    out := new(RegisterResponse)
    err := c.cc.Invoke(ctx, "/croupier.control.v1.ControlService/Register", in, out, opts...)
    if err != nil { return nil, err }
    return out, nil
}
func (c *controlServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
    out := new(HeartbeatResponse)
    err := c.cc.Invoke(ctx, "/croupier.control.v1.ControlService/Heartbeat", in, out, opts...)
    if err != nil { return nil, err }
    return out, nil
}
